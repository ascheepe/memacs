;	TPAGE.CMD:	TxBasic language MENU Page
;			for MicroEMACS 3.9e and above
;

; set up the "clean" procedure
store-procedure clean
	delete-buffer "[b-indent]"
	delete-buffer "[b-indent-brace]"
	delete-buffer "[b-check]"
	delete-buffer "[b-compile]"
	delete-buffer "[b-run]"
	delete-buffer "[b-new-if]"
	delete-buffer "[b-new-switch]"
	delete-buffer "[b-new-for]"
	delete-buffer "[b-new-while]"
	set $cmode %oldmode
	set $gmode %oldgmode
!endm

; make sure the function key window is up
	set %rcfkeys FALSE
	toggle-fkeys
	write-message "Loading..."

; Write out the page instructions
	save-window
	1 next-window
	beginning-of-file
	delete-mode "VIEW"
	set $curcol 25
	overwrite-string " F1 indent source   F2 indent with braces  F11 convert to UTF-8"
	next-line
	set $curcol 25
	overwrite-string " F3 check syntax    F4 compile             F12 convert to TheoX"
	next-line
	set $curcol 25
	overwrite-string " F5 previous error  F6 next error         "
	next-line
	set $curcol 18
	overwrite-string "TXB "
	set $curcol 25
	overwrite-string " F7 IF ELSE ENDIF   F8 SELECT CASE CEND   "
	next-line
	set $curcol 25
	overwrite-string " F9 FOR NEXT        F10 WHILE WEND         "
	unmark-buffer
	beginning-of-file
	add-mode "VIEW"
	!force restore-window
	update-screen

;

store-procedure b-indent
;	set $debug TRUE
	unmark-buffer
	filter-buffer &cat "txf --unbrace -i" $hardtab
	!force set $debug FALSE
!endm

store-procedure b-indent-brace
;	set $debug TRUE
	unmark-buffer
	filter-buffer &cat "txf --brace -i" $hardtab
	!force set $debug FALSE
!endm

store-procedure b-check
;	set $debug TRUE
	!if %rcfkeys
		!force toggle-fkeys
	!endif
	delete-other-windows
	save-file
	pipe-command &cat "txlint " $cfname
	delete-buffer "[F5 prev error  F6 next error]"
	name-buffer "[F5 prev error  F6 next error]"
	add-mode "VIEW"
	delete-mode "CMODE"
	!force 5 resize-window
	previous-window
	!force set $debug FALSE
!endm

store-procedure b-compile
;	set $debug TRUE
	!if %rcfkeys
		!force toggle-fkeys
	!endif
	delete-other-windows
	save-file
	set %cfname $cfname
	split-current-window
	delete-buffer "[F5 prev error  F6 next error]"
	select-buffer "[F5 prev error  F6 next error]"
	add-mode "VIEW"
	!force 5 resize-window
	pipe-command &cat "txb " %cfname
	!force set $debug FALSE
!endm

store-procedure b-prev-error
;	set $debug TRUE
	delete-other-windows
	split-current-window
	select-buffer "[F5 prev error  F6 next error]"
	add-mode "VIEW"
	!force 5 resize-window
	beginning-of-line
	!force search-reverse ", line "
	!if &seq $status FALSE
		write-message "[No more error]"
		previous-window
		!return
	!endif
	7 forward-character
	set-mark
	end-of-word
	set %line $region
	previous-window
	!force %line goto-line
	!force set $debug FALSE
!endm

store-procedure b-next-error
;	set $debug TRUE
	delete-other-windows
	split-current-window
	select-buffer "[F5 prev error  F6 next error]"
	add-mode "VIEW"
	!force 5 resize-window
	!force search-forward ", line "
	!if &seq $status FALSE
		write-message "[No more error]"
		previous-window
		!return
	!endif
	set-mark
	end-of-word
	set %line $region
	previous-window
	!force %line goto-line
	!force set $debug FALSE
!endm

store-procedure b-new-if
	set %cond @"Logical expression: "
;	set $debug TRUE
	insert-string &cat "IF " %cond
	newline-and-indent
	newline-and-indent
	insert-string "ELSE"
	newline-and-indent
	handle-tab
	newline-and-indent
	insert-string "IFEND"
	newline-and-indent
	delete-previous-character
	4 previous-line
	handle-tab
	end-of-line
	!force set $debug FALSE
!endm

store-procedure b-new-select
	set %cond @"Expression: "
;	set $debug TRUE
	insert-string &cat "SELECT " %cond
	newline-and-indent
	newline-and-indent
	insert-string "CASE"
	newline-and-indent
	handle-tab
	newline-and-indent
	insert-string "CEND"
	newline-and-indent
	delete-previous-character
	6 previous-line
	end-of-line
	!force set $debug FALSE
!endm

;	FOR NEXT
store-procedure b-new-for
	set %cond @"Variable name: "
;	set $debug TRUE
	insert-string &cat &cat "FOR " %cond "="
	newline-and-indent
	handle-tab
	newline-and-indent
	insert-string &cat "NEXT " %cond
	2 previous-line
	end-of-line
	!force set $debug FALSE
!endm

;
;	WHILE WEND
store-procedure b-new-while
	set %cond @"Logical expression: "
;	set $debug TRUE
	insert-string &cat "WHILE " %cond
	newline-and-indent
	handle-tab
	newline-and-indent
	insert-string "WEND"
	previous-line
	end-of-line
	!force set $debug FALSE
!endm

store-procedure toggle-errors
	!if %rcerrors
		!goto rcfoff
	!endif

;	toggle errors window on
	save-window
	1 next-window
	!if &sequal $cbufname "emacs.hlp"
		delete-window
	!endif
	!if &not &sequal $cbufname "[F5 prev error  F6 next error]"
		1 split-current-window
		1 select-buffer "[F5 prev error  F6 next error]"
		add-mode "red"
		add-mode "WHITE"
		!force 5 resize-window
		1 goto-line
	!endif
	set %rcfkeys TRUE
	!force restore-window
	!if &sequal $cbufname "[F5 prev error  F6 next error]"
		next-window
	!endif
	write-message "[Errors window ON]"
	!return

	;Toggle the error window off
*rcfoff
	save-window
	1 next-window
	!if &sequal "[F5 prev error  F6 next error]" $cbufname
		delete-window
	!endif
	!force restore-window
	write-message "[Errors window OFF]"
	set %rcerrors FALSE
!endm

macro-to-key b-indent		S-FN1
macro-to-key b-indent-brace	S-FN2
macro-to-key b-check		S-FN3
macro-to-key b-compile		S-FN4
macro-to-key b-prev-error	S-FN5
macro-to-key b-next-error	S-FN6
macro-to-key b-new-if		S-FN7
macro-to-key b-new-select	S-FN8
macro-to-key b-new-for		S-FN9
macro-to-key b-new-while	S-FN0

; Set up CMODE
set %oldmode $cmode
set %oldgmode $gmode
add-mode CMODE
add-global-mode CMODE
set $hardtab 5

write-message "[TxBasic MENU page loaded]"
